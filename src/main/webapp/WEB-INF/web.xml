<?xml version="1.0" encoding="UTF-8" ?>
<web-app
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://xmlns.jcp.org/xml/ns/javaee"
        xsi:schemaLocation=
                "http://xmlns.jcp.org/xml/ns/javaee
        http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
        version="4.0"
>
<!--Servlet配置-->
  <display-name>LearnServlet</display-name>
  <default-context-path>ContextPath</default-context-path>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!--Servlet 请求与响应 全局编码设置-->
  <request-character-encoding>UTF-8</request-character-encoding>
  <response-character-encoding>UTF-8</response-character-encoding>
  <!--设置默认的区域与编码对应-->
  <locale-encoding-mapping-list>
    <locale-encoding-mapping>
      <locale>zh_TW</locale>
      <encoding>UTF-8</encoding>
    </locale-encoding-mapping>
  </locale-encoding-mapping-list>
  <!--设置后缀与与MIME类型-->
  <mime-mapping>
    <extension>pdf</extension>
    <mime-type>application/pdf</mime-type>
  </mime-mapping>

  <servlet>
    <servlet-name>Hello</servlet-name>
    <servlet-class>package.Hello</servlet-class>
    <multipart-config>
      <file-size-threshold>0</file-size-threshold>
<!--      <location>""</location>-->
<!--      <max-file-size>-1L</max-file-size>-->
<!--      <max-request-size>-1L</max-request-size>-->
    </multipart-config>
  </servlet>

  <session-config>
    <!--设定浏览器多久没有请求应用程序时，HttpSession就失效-->
    <session-timeout>30</session-timeout>
    <!--在ServletContext初始化之前配置SessionCookieConfig-->
    <cookie-config>
      <!-- -->
      <name>youJseSessionId</name>
      <secure>true</secure>
<!--      <http-only>true</http-only>-->
      <max-age>1800</max-age>
    </cookie-config>
  </session-config>

  <!--初始化参数设置-->
  <servlet>
    <servlet-name>ServletInitParameter</servlet-name>
    <servlet-class>pers.mortal.learn.servlet.life.ServletConfigExample</servlet-class>
    <init-param>
      <param-name>姓名</param-name>
      <param-value>钟景文</param-value>
    </init-param>
    <init-param>
      <param-name>方式</param-name>
      <param-value>XML</param-value>
    </init-param>
    <init-param>
      <param-name>作用</param-name>
      <param-value>覆盖默认常数，便于更替常数</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>ServletInitParameter</servlet-name>
    <url-pattern>/life/servlet_init_parameter</url-pattern>
  </servlet-mapping>

  <!--应用程序初始化参数-->
  <context-param>
    <param-name>SERVLET_CONTEXT_INIT_PARAMETER</param-name>
    <param-value>/advance</param-value>
  </context-param>
  <!--监听器-->
  <listener>
    <listener-class>pers.mortal.learn.servlet.listener.servlet_context.ServletContextAttributeListenerExample</listener-class>
  </listener>
  <listener>
    <listener-class>pers.mortal.learn.servlet.listener.servlet_context.ServletContextListenerExample</listener-class>
  </listener>


  <!--过滤器-->
  <filter>
      <filter-name>filterExample</filter-name>
      <filter-class>pers.mortal.learn.servlet.filter.FilterExample</filter-class>
      <init-param>
        <param-name>PARAM1</param-name>
        <param-value>VALUE1</param-value>
      </init-param>
    <init-param>
      <param-name>PARAM2</param-name>
      <param-value>VALUE2</param-value>
    </init-param>
  </filter>
  <filter-mapping>
      <filter-name>filterExample</filter-name>
      <url-pattern>/*</url-pattern>
      <servlet-name>ServletInitParameter</servlet-name>
      <dispatcher>REQUEST</dispatcher>
      <dispatcher>FORWARD</dispatcher>
      <dispatcher>INCLUDE</dispatcher>
      <dispatcher>ERROR</dispatcher>
      <dispatcher>ASYNC</dispatcher>
  </filter-mapping>

<!--JSP配置-->
  <jsp-config>

    <jsp-property-group>

      <!--默认page -->
      <url-pattern>*.jsp</url-pattern>
      <page-encoding>UTF-8</page-encoding>
      <default-content-type>text/html</default-content-type>
      <buffer>16kb</buffer>
      <!--默认include，声明指定JSP开头与结尾包括的网页-->
<!--      <include-prelude>/WEB-INF/jspf/pre.jspf</include-prelude>-->
<!--      <include-coda>/WEB-INF/jspf/coda.jspf</include-coda>-->
      <!--忽略换行，指示元素之间的换行也会输出到响应中，可以配置忽略这些换行-->
<!--      <trim-directive-whiespace>true</trim-directive-whiespace>-->
      <!--Scriptlet元素，-->
<!--      <scripting-invalid>true</scripting-invalid>&lt;!&ndash;禁用JSP上的Scriptlet&ndash;&gt;-->
<!--      <el-ignored>true</el-ignored>-->
    </jsp-property-group>
  </jsp-config>

<!--  <error-page>-->
<!--    <exception-type>java.lang.NullPointerException</exception-type>-->
<!--    <location>/report.view</location>&lt;!&ndash;该页面必须设置isErrorPage属性为true,才可使用exception隐式对象&ndash;&gt;-->
<!--  </error-page>-->
<!--  <error-page>-->
<!--    <error-code>404</error-code>&lt;!&ndash;基于HTTP错误状态码转发至处理页面&ndash;&gt;-->
<!--    <location>/404.jsp</location>-->
<!--  </error-page>-->


  <!-- 容器安全 -->
  <!--定义身份验证方式-->
<!--  <login-config>-->
<!--    <auth-method>BASIC</auth-method>-->
<!--&lt;!&ndash;    <auth-method>DIGEST</auth-method>&ndash;&gt;-->
<!--&lt;!&ndash;    <auth-method>CLIENT-CERT</auth-method>&ndash;&gt;-->
<!--  </login-config>-->

  <login-config>
    <auth-method>FORM</auth-method>
    <form-login-config>
      <form-login-page>/security/plogin.html</form-login-page>
      <form-error-page>/security/error.html</form-error-page>
    </form-login-config>
  </login-config>

  <!--授予指定访问角色权限，首先定义角色-->
  <security-role>
    <description>Admin User</description>
    <role-name>admin</role-name>
  </security-role>
  <security-role>
    <description>Manager User</description>
    <role-name>manager</role-name>
  </security-role>

  <!--授予指定访问角色权限，然后授予访问权限-->
  <security-constraint>
    <!--定义访问控制资源，以URI和HTTP方法标识资源-->
    <web-resource-collection>
      <web-resource-name>Admin</web-resource-name>
      <url-pattern>/admin/*</url-pattern>
      <!--没有定义HTTP方法，则无论时哪个HTTP方法都只能被admin角色反问-->
    </web-resource-collection>
    <!--定义访问控制权限-->
    <auth-constraint>
      <role-name>admin</role-name>
    </auth-constraint>
  </security-constraint>

  <security-constraint>
    <!--定义访问控制资源，以URI和HTTP方法标识资源-->
    <web-resource-collection>
      <web-resource-name>Manager</web-resource-name>
      <url-pattern>/manager/*</url-pattern>
      <!--表明除了GET、POST这两个HTTP方法，其他HTTP方法无论是否具备admin或manager角色都可以访问-->
      <http-method>GET</http-method>
      <http-method>POST</http-method>
      <!--表明除了GET、POST这两个HTTP方法， 其他方法都收到约束-->
<!--      <http-method-omission>GET</http-method-omission>-->
<!--      <http-method-omission>POST</http-method-omission>-->
    </web-resource-collection>
    <!--定义访问控制权限-->
    <auth-constraint>
      <role-name>admin</role-name>
      <role-name>manager</role-name>
    </auth-constraint>
  </security-constraint>
  <!-- <auth-constraint/>空元素表示没有任何角色可以访问-->
  <!-- <role-name>**<role-name>表示任一通过验证的角色-->

  <deny-uncovered-http-methods/>
  <!--Servlet3.1中， 表示拒绝未列入<security-constraint>的HTTP方法，试图访问将会返回302-->

</web-app>
